// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/verse.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7435368780268513428),
      name: 'Verse',
      lastPropertyId: const obx_int.IdUid(10, 6824343489934541948),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5248859571142686532),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3146336720481937675),
            name: 'o',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1250540152611050746),
            name: 'biv',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4981634119903520363),
            name: 'bna',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1141398271113391824),
            name: 'bnu',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8803773772837249189),
            name: 'ch',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7682763479167734549),
            name: 'v',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1251470388886999841),
            name: 't',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3977524195628587659),
            name: 'h',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6824343489934541948),
            name: 'hnu',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 7435368780268513428),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Verse: obx_int.EntityDefinition<Verse>(
        model: _entities[0],
        toOneRelations: (Verse object) => [],
        toManyRelations: (Verse object) => {},
        getId: (Verse object) => object.id,
        setId: (Verse object, int id) {
          object.id = id;
        },
        objectToFB: (Verse object, fb.Builder fbb) {
          final bivOffset = fbb.writeString(object.biv);
          final bnaOffset = fbb.writeString(object.bna);
          final vOffset = fbb.writeListInt64(object.v);
          final tOffset = fbb.writeString(object.t);
          final hOffset = object.h == null ? null : fbb.writeString(object.h!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.o);
          fbb.addOffset(2, bivOffset);
          fbb.addOffset(3, bnaOffset);
          fbb.addInt64(4, object.bnu);
          fbb.addInt64(5, object.ch);
          fbb.addOffset(6, vOffset);
          fbb.addOffset(7, tOffset);
          fbb.addOffset(8, hOffset);
          fbb.addFloat64(9, object.hnu);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final oParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final bivParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final bnaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final bnuParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final chParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final vParam = const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final tParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final hParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final hnuParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final object = Verse(
              id: idParam,
              o: oParam,
              biv: bivParam,
              bna: bnaParam,
              bnu: bnuParam,
              ch: chParam,
              v: vParam,
              t: tParam,
              h: hParam,
              hnu: hnuParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Verse] entity fields to define ObjectBox queries.
class Verse_ {
  /// See [Verse.id].
  static final id = obx.QueryIntegerProperty<Verse>(_entities[0].properties[0]);

  /// See [Verse.o].
  static final o = obx.QueryIntegerProperty<Verse>(_entities[0].properties[1]);

  /// See [Verse.biv].
  static final biv = obx.QueryStringProperty<Verse>(_entities[0].properties[2]);

  /// See [Verse.bna].
  static final bna = obx.QueryStringProperty<Verse>(_entities[0].properties[3]);

  /// See [Verse.bnu].
  static final bnu =
      obx.QueryIntegerProperty<Verse>(_entities[0].properties[4]);

  /// See [Verse.ch].
  static final ch = obx.QueryIntegerProperty<Verse>(_entities[0].properties[5]);

  /// See [Verse.v].
  static final v =
      obx.QueryIntegerVectorProperty<Verse>(_entities[0].properties[6]);

  /// See [Verse.t].
  static final t = obx.QueryStringProperty<Verse>(_entities[0].properties[7]);

  /// See [Verse.h].
  static final h = obx.QueryStringProperty<Verse>(_entities[0].properties[8]);

  /// See [Verse.hnu].
  static final hnu = obx.QueryDoubleProperty<Verse>(_entities[0].properties[9]);
}
